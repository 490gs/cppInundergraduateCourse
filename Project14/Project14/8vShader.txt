#version 420 core
layout(location=0)in vec3 aPos;
//layout(location=1)in vec3 aNormal;
layout(location=2)in vec2 aTexCoords;
layout(location=3)in mat4 instanceMatrix;


out VS_OUT{	
	//vec2 texCoords;
	vec3 normal;
}vs_out;

out vec2 TexCoords;
layout(std140,binding=0) uniform Matrices{
	mat4 projection;
	mat4 view;
};
uniform mat4 model;

void main()
{
	TexCoords=aTexCoords;
	//vs_out.texCoords=aTexCoords;
	gl_Position=projection*view*model*vec4(aPos,1.0);
	gl_Position=projection*view*instanceMatrix*vec4(aPos,1.0);
	//mat3 normal=mat3(transpose(inverse(view*model)));
	//vs_out.normal=normalize(vec3(projection*vec4(normal*aNormal,0.0)));
}



/*layout(location=0)in vec2 aPos;
layout(location=1) in vec3 aColor;
out VS_OUT{
	vec3 color;
}vs_out;
void main()
{
	gl_Position=vec4(aPos.x,aPos.y,0.0,1.0);
	vs_out.color=aColor;
}//*/
/*layout(location=0) in vec3 aPos;
layout(location=1) in vec2 aTexCoords;

layout(std140,binding=0) uniform Matrices//Uniform块；设定Uniform块布局为std140；此外还有shares和packed布局；显式地Uniform块的绑定点存储在着色器中，绑定点为0；
{
	mat4 projection;
	mat4 view;
};


out VS_OUT//接口块；
{
	vec2 TexCoords;
}vs_out;


uniform mat4 model;

void main()
{
	vs_out.TexCoords=aTexCoords;
	gl_Position=projection*view*model*vec4(aPos,1.0);
	gl_PointSize=gl_Position.z;//点的尺寸等于位置的z值；
}//*/
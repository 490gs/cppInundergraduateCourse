#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D screenTexture;

//uniform sampler2DMS scrTexMs;//自定义抗锯齿算法：获取每个子样本的颜色值；

void main()
{
	

	//vec4 colorMap=texelFetch(scrTexMs,TexCoords,3);//自定义抗锯齿算法：第4个子样本；
	const float offset=1.0/300.0;
	vec2 offsets[9]=vec2[](
		vec2(-offset,  offset), // 左上
        vec2( 0.0f,    offset), // 正上
        vec2( offset,  offset), // 右上
        vec2(-offset,  0.0f),   // 左
        vec2( 0.0f,    0.0f),   // 中
        vec2( offset,  0.0f),   // 右
        vec2(-offset, -offset), // 左下
        vec2( 0.0f,   -offset), // 正下
        vec2( offset, -offset)  // 右下
	);
	/*float kernel[9]=float[](
		-1,-1,-1,
		-1,9,-1,
		-1,-1,-1
	);//锐化-核；*/
	float kernel[9] = float[](
		1.0 / 16, 2.0 / 16, 1.0 / 16,
		2.0 / 16, 4.0 / 16, 2.0 / 16,
		1.0 / 16, 2.0 / 16, 1.0 / 16  
	);//模糊-核；*/
	/*float kernel[9]=float[](
		1,1,1,
		1,-8,1,
		1,1,1
	);//边缘检测-核；*/
	/*vec3 sampleTex[9];
	for(int i=0;i<9;++i)
		sampleTex[i]=vec3(texture(screenTexture,TexCoords.st+offsets[i]));
	vec3 col=vec3(0.0);
	for(int i=0;i<9;++i)
		col+=sampleTex[i]*kernel[i];//计算每一像素颜色值；*/

	vec3 col=texture(screenTexture,TexCoords).rgb;
	FragColor=vec4(col,1.0);//正常；
	//FragColor=vec4(vec3(1.0-col),1.0);//反相；
	/*float average=(0.1*col.r+0.4*col.g+0.5*col.b)/3.0;
	FragColor=vec4(vec3(average),1.0);//（加权）灰度；*/
}
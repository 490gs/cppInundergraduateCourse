#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform vec3 viewPos;

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
uniform Material material;

struct DirLight{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
uniform DirLight dirlight;
struct PointLight{
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};
#define NR_POINT_LIGHTS 4
uniform PointLight pointlight[NR_POINT_LIGHTS];
struct SpotLight{
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};
uniform SpotLight spotlight;
vec3 CalcDirLight(DirLight light,vec3 normal,vec3 viewDir);
vec3 CalcPointLight(PointLight light,vec3 normal,vec3 fragPos,vec3 viewDir);
vec3 CalcSpotLight(SpotLight light,vec3 normal,vec3 fragPos,vec3 viewDir);

void main()
{
	vec3 norm=normalize(Normal);
	vec3 viewDir=normalize(viewPos-FragPos);
	
	vec3 result=CalcDirLight(dirlight,norm,viewDir);
	for(int i;i<NR_POINT_LIGHTS;++i)
		result+=CalcPointLight(pointlight[i],norm,FragPos,viewDir);
	result+=CalcSpotLight(spotlight,norm,FragPos,viewDir);
	FragColor=vec4(result,1.0);
}
//计算平行光；
vec3 CalcDirLight(DirLight light,vec3 normal,vec3 viewDir)
{
	vec3 lightDir=normalize(-light.direction);
	float diff=max(dot(normal,lightDir),0.0);
	vec3 reflectDir=reflect(-lightDir,normal);
	float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	
	vec3 ambient=texture(material.diffuse,TexCoords).rgb*light.ambient;
	vec3 diffuse=diff*texture(material.diffuse,TexCoords).rgb*light.diffuse;
	vec3 specular=texture(material.specular,TexCoords).rgb*spec*light.specular;

	return (ambient+diffuse+specular);
}
//计算点光源；
vec3 CalcPointLight(PointLight light,vec3 normal,vec3 fragPos,vec3 viewDir)
{
	vec3 lightDir=normalize(light.position-fragPos);
	float diff=max(dot(normal,lightDir),0.0);
	
	vec3 reflectDir=reflect(-lightDir,normal);
	float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	
	float distance=length(light.position-fragPos);
	float attenuation=1.0/(light.constant+light.linear*distance+light.quadratic*distance*distance);

	vec3 ambient=texture(material.diffuse,TexCoords).rgb*light.ambient;
	vec3 diffuse=diff*texture(material.diffuse,TexCoords).rgb*light.diffuse;
	vec3 specular=texture(material.specular,TexCoords).rgb*spec*light.specular;

	ambient*=attenuation;
	diffuse*=attenuation;
	specular*=attenuation;

	return (ambient+diffuse+specular);
}
//计算聚光；
vec3 CalcSpotLight(SpotLight light,vec3 normal,vec3 fragPos,vec3 viewDir)
{
	vec3 lightDir=normalize(light.position-fragPos);
	float diff=max(dot(normal,lightDir),0.0);
	
	vec3 reflectDir=reflect(-lightDir,normal);
	float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	
	vec3 ambient=texture(material.diffuse,TexCoords).rgb*light.ambient;
	vec3 diffuse=diff*texture(material.diffuse,TexCoords).rgb*light.diffuse;
	vec3 specular=texture(material.specular,TexCoords).rgb*spec*light.specular;
	
	float distance=length(light.position-fragPos);
	float attenuation=1.0/(light.constant+light.linear*distance+light.quadratic*distance*distance);
	ambient*=attenuation;
	diffuse*=attenuation;
	specular*=attenuation;

	float theta=dot(lightDir,normalize(-light.direction));
	float epsilon=light.cutOff-light.outerCutOff;
	float intensity=clamp((theta-light.outerCutOff)/epsilon,0.0,1.0);
	diffuse*=intensity;
	specular*=intensity;

	return (ambient+diffuse+specular);
}
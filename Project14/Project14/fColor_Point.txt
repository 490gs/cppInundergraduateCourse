#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
uniform Material material;
struct Light{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};
uniform Light light;
uniform vec3 viewPos;

void main()
{
	float distance=length(light.position-FragPos);
	float attenuation=1.0/(light.constant+light.linear*distance+light.quadratic*distance*distance);

	vec3 ambient=texture(material.diffuse,TexCoords).rgb*light.ambient;
	
	vec3 norm=normalize(Normal);
	vec3 lightDir=normalize(light.position-FragPos);
	float diff=max(dot(norm,lightDir),0.0);
	vec3 diffuse=diff*texture(material.diffuse,TexCoords).rgb*light.diffuse;

	vec3 viewDir=normalize(viewPos-FragPos);
	vec3 reflectDir=reflect(-lightDir,norm);
	float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	vec3 specular=texture(material.specular,TexCoords).rgb*spec*light.specular;

	ambient*=attenuation;
	diffuse*=attenuation;
	specular*=attenuation;

	vec3 result=ambient+diffuse+specular;
	FragColor=vec4(result,1.0);
}
/*#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
uniform Material material;
struct Light{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};
uniform Light pointlight[4];
uniform vec3 viewPos;

void main()
{
vec3 result=vec3(0.0);for(int i=0;i<4;++i)
{Light light=pointlight[i];
	float distance=length(light.position-FragPos);
	float attenuation=1.0/(light.constant+light.linear*distance+light.quadratic*distance*distance);

	vec3 ambient=texture(material.diffuse,TexCoords).rgb*light.ambient;
	
	vec3 norm=normalize(Normal);
	vec3 lightDir=normalize(light.position-FragPos);
	float diff=max(dot(norm,lightDir),0.0);
	vec3 diffuse=diff*texture(material.diffuse,TexCoords).rgb*light.diffuse;

	vec3 viewDir=normalize(viewPos-FragPos);
	vec3 reflectDir=reflect(-lightDir,norm);
	float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	vec3 specular=texture(material.specular,TexCoords).rgb*spec*light.specular;

	ambient*=attenuation;
	diffuse*=attenuation;
	specular*=attenuation;

	result+=(ambient+diffuse+specular);}
	FragColor=vec4(result,1.0);
}*/
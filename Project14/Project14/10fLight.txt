#version 330 core
out vec4 FragColor;
in vec2 TexCoords;

//uniform sampler2D gPosition;
uniform sampler2D gPositionDepth;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;
uniform sampler2D ssao;

struct Light{
	vec3 Position;
	vec3 Color;

	float Linear;
	float Quadratic;
	//float Radius;
};
uniform Light light;
/*const int NR_LIGHTS=32;
uniform Light lights[NR_LIGHTS];
uniform vec3 viewPos;*/

void main()
{
	//vec3 FragPos=texture(gPosition,TexCoords).rgb;
	vec3 FragPos=texture(gPositionDepth,TexCoords).rgb;
	vec3 Normal=texture(gNormal,TexCoords).rgb;
	//vec3 Albedo=texture(gAlbedoSpec,TexCoords).rgb;
	vec3 Diffuse=texture(gAlbedoSpec,TexCoords).rgb;
	float Specular=texture(gAlbedoSpec,TexCoords).a;
	float AmbientOcclusion=texture(ssao,TexCoords).r;

	/*vec3 lighting=Albedo*0.1;
	vec3 viewDir=normalize(viewPos-FragPos);
	for(int i=0;i<NR_LIGHTS;++i)
	{
		float distance=length(lights[i].Position-FragPos);
		if(distance<lights[i].Radius)
		{
			//Âþ·´Éä£»
			vec3 lightDir=normalize(lights[i].Position-FragPos);
			vec3 diffuse=max(dot(Normal,lightDir),0.0)*Albedo*lights[i].Color;
			//¾µÃæ·´Éä£»
			vec3 halfwayDir=normalize(lightDir+viewDir);
			float spec=pow(max(dot(Normal,halfwayDir),0.0),16.0);
			vec3 specualr=lights[i].Color*spec*Specular;
			//Ë¥¼õ£»
			float attenuation=1.0/(1.0+lights[i].Linear*distance+lights[i].Quadratic*distance*distance);
			diffuse*=attenuation;
			specualr*=attenuation;
			lighting+=diffuse+specualr;
		}
	}*/
	vec3 ambient=vec3(0.3*AmbientOcclusion);
	//vec3 ambient=vec3(0.3);
	vec3 lighting=ambient;
	vec3 viewDir=normalize(-FragPos);
	//Âþ·´Éä£»
	vec3 lightDir=normalize(light.Position-FragPos);
	vec3 diffuse=max(dot(Normal,lightDir),0.0)*Diffuse*light.Color;
	//¾µÃæ·´Éä£»
	vec3 halfwayDir=normalize(lightDir+viewDir);
	float spec=pow(max(dot(Normal,halfwayDir),0.0),8.0);
	vec3 specular=light.Color*spec;
	//Ë¥¼õ£»
	float dist=length(light.Position-FragPos);
	float attenuation=1.0/(1.0+light.Linear*dist+light.Quadratic*dist*dist);
	diffuse*=attenuation;
	specular*=attenuation;
	lighting+=diffuse+specular;

	FragColor=vec4(lighting,1.0);
}
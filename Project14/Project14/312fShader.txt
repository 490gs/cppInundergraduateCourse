#version 330 core
out vec4 FragColor;

in VS_OUT{
	vec3 FragPos;
	vec3 Normal;
	vec2 TexCoords;
	//vec4 FragPosLightSpace;//平行光阴影用；
}fs_in;

uniform sampler2D diffuseTexture;
//uniform sampler2D shadowMap;//平行光阴影用；
uniform samplerCube depthMap;//点光源阴影用；
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform float far_plane;//点光源阴影用；
uniform bool shadows;

vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
);

/*float ShadowCalculation(vec4 fragPosLightSpace,float bias)//平行光阴影用；
{
	float shadow=0.0;
	//执行透视除法；
	vec3 projCoords=fragPosLightSpace.xyz/fragPosLightSpace.w;
	projCoords=projCoords*0.5+0.5;
	if(projCoords.z>1.0)//若超出光空间视锥深度直接认为不在阴影中；
		return shadow;
	//计算当前像素在光空间的深度；
	float closedDepth=texture(shadowMap,projCoords.xy).r;
	float currentDepth=projCoords.z;
	//
	vec2 texelSize=1.0/textureSize(shadowMap,0);
	for(int x=-1;x<2;++x)//PSF；
		for(int y=-1;y<2;++y)
		{
			float pcfDepth=texture(shadowMap,projCoords.xy+vec2(x,y)*texelSize).r;
			shadow+=currentDepth-bias>pcfDepth?1.0:0.0;//应用阴影偏移修复阴影失真；
		}
	//float bias=0.005;//应用阴影偏移修复阴影失真；
	//float shadow=currentDepth-bias>closedDepth?1.0:0.0;
	shadow/=9.0;
	return shadow;
}*/
float shadowCalculation(vec3 fragPos,float bias)//点光源阴影用；
{
	//获取该方向上离光源最近片段距离；
	vec3 fragToLight=fragPos-lightPos;
	/*float closestDepth=texture(depthMap,fragToLight).r;
	closestDepth*=far_plane;*/
	//获取该片段离光源的距离并比较；
	float currentDepth=length(fragToLight);
	//float shadow=currentDepth-bias>closestDepth?1.0:0.0;
	//应用PCF；
	float shadow=0.0;
	/*float samples=5.0;
	float offset=0.1;
	for(float x=-offset;x<offset;x+=offset/(samples*0.5))
		for(float y=-offset;y<offset;y+=offset/(samples*0.5))
			for(float z=-offset;z<offset;z+=offset/(samples*0.5))
			{
				float closestDepth=texture(depthMap,fragToLight+vec3(x,y,z)).r;
				closestDepth*=far_plane;
				if(currentDepth-bias>closestDepth)
					shadow+=1.0;
			}
	shadow/=(samples*samples*samples);//*/
	//一种样本数变少的方式；
	int samples=20;
	float viewDistance=length(viewPos-fragPos);
	float diskRadius=(1.0+(viewDistance/far_plane))/25.0;
	for(int i=0;i<samples;++i)
	{
		float closestDepth=texture(depthMap,fragToLight+sampleOffsetDirections[i]*diskRadius).r;
		closestDepth*=far_plane;
		if(currentDepth-bias>closestDepth)
			shadow+=1.0;
	}
	shadow/=float(samples);//*/
	return shadow;
	//return closestDepth;//观察深度；
}
void main()
{
	vec3 color=texture(diffuseTexture,fs_in.TexCoords).rgb;
	vec3 normal=normalize(fs_in.Normal);
	vec3 lightColor=vec3(1.0);
	//环境光；
	vec3 ambient=0.3*color;
	//漫反射；
	vec3 lightDir=normalize(lightPos-fs_in.FragPos);
	float diff=max(dot(lightDir,normal),0.0);
	vec3 diffuse=diff*lightColor;
	//镜面反射；
	vec3 viewDir=normalize(viewPos-fs_in.FragPos);
	vec3 refletDir=reflect(-lightDir,normal);
	float spec=0.0;
	vec3 halfwayDir=normalize(lightDir+viewDir);
	spec=pow(max(dot(normal,halfwayDir),0.0),64.0);
	vec3 specular=spec*lightColor;
	//计算阴影及阴影偏移；
	float bias=max(0.005*(1.0-dot(normal,lightDir)),0.005);
	//float shadow=ShadowCalculation(fs_in.FragPosLightSpace,bias);//平行光阴影用；
	float shadow=shadowCalculation(fs_in.FragPos,bias);
	shadow=shadows?min(shadow,0.75):0.0;//减弱阴影；
	vec3 lighting=(ambient+(1.0-shadow)*(diffuse+specular))*color;
	FragColor=vec4(lighting,1.0);//*/
	//FragColor=vec4(vec3(shadow/far_plane),1.0);//观察深度；
}
